<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.6.1/cropper.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.6.1/cropper.min.js"></script>
    <style>
        .cropper-container {
            max-height: 500px;
        }
        .variant-card {
            transition: all 0.3s ease;
        }
        .variant-card:hover {
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
        }
    </style>
</head>
<body class="bg-gradient-to-br from-gray-50 to-gray-100 min-h-screen">
    <!-- Header -->
    <nav class="bg-white shadow-lg">
        <div class="container mx-auto px-4 py-4">
            <div class="flex justify-between items-center">
                <h1 class="text-2xl font-bold text-gray-800">
                    <span class="text-blue-600">ðŸ“¦</span> Add New Product
                </h1>
                <a href="/admin/products" class="flex items-center space-x-2 bg-gray-600 hover:bg-gray-700 text-white px-6 py-2.5 rounded-lg transition duration-200 shadow-md">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"/>
                    </svg>
                    <span>Back to List</span>
                </a>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <div class="container mx-auto px-4 py-8">
        <div class="max-w-6xl mx-auto">
            <form id="productForm" class="space-y-6">
                
                <!-- Basic Information Card -->
                <div class="bg-white rounded-xl shadow-lg p-6 border-t-4 border-blue-600">
                    <div class="flex items-center mb-6">
                        <div class="bg-blue-100 p-3 rounded-lg">
                            <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                            </svg>
                        </div>
                        <h2 class="text-2xl font-bold text-gray-800 ml-3">Basic Information</h2>
                    </div>
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <!-- Product Name -->
                        <div class="md:col-span-2">
                            <label class="block text-gray-700 text-sm font-bold mb-2">
                                Product Name <span class="text-red-500">*</span>
                            </label>
                            <input type="text" 
                                   name="name" 
                                   id="name" 
                                   required 
                                   class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200"
                                   placeholder="Enter product name">
                        </div>

                        <!-- Description -->
                        <div class="md:col-span-2">
                            <label class="block text-gray-700 text-sm font-bold mb-2">
                                Description <span class="text-red-500">*</span>
                            </label>
                            <textarea name="description" 
                                      id="description" 
                                      required 
                                      rows="4"
                                      class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200"
                                      placeholder="Enter detailed product description"></textarea>
                        </div>

                        <!-- Brand -->
                        <div>
                            <label class="block text-gray-700 text-sm font-bold mb-2">
                                Brand <span class="text-red-500">*</span>
                            </label>
                            <input type="text" 
                                   name="brand" 
                                   id="brand" 
                                   required
                                   class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200"
                                   placeholder="Enter brand name">
                        </div>

                        <!-- Category -->
                        <div>
                            <label class="block text-gray-700 text-sm font-bold mb-2">
                                Category <span class="text-red-500">*</span>
                            </label>
                            <select name="category" 
                                    id="category" 
                                    required
                                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200 bg-white">
                                <option value="">Select a category</option>
                                <% categories.forEach(category => { %>
                                    <option value="<%= category._id %>"><%= category.name %></option>
                                <% }); %>
                            </select>
                        </div>
                    </div>
                </div>

                <!-- Product Variants Card -->
                <div class="bg-white rounded-xl shadow-lg p-6 border-t-4 border-green-600">
                    <div class="flex justify-between items-center mb-6">
                        <div class="flex items-center">
                            <div class="bg-green-100 p-3 rounded-lg">
                                <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zm0 0h12a2 2 0 002-2v-4a2 2 0 00-2-2h-2.343M11 7.343l1.657-1.657a2 2 0 012.828 0l2.829 2.829a2 2 0 010 2.828l-8.486 8.485M7 17h.01"/>
                                </svg>
                            </div>
                            <h2 class="text-2xl font-bold text-gray-800 ml-3">Product Variants</h2>
                        </div>
                        <button type="button" 
                                onclick="addVariant()" 
                                class="flex items-center space-x-2 bg-green-600 hover:bg-green-700 text-white px-5 py-2.5 rounded-lg transition duration-200 shadow-md transform hover:scale-105">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
                            </svg>
                            <span>Add Variant</span>
                        </button>
                    </div>

                    <div id="variantsContainer" class="space-y-4"></div>

                    <div id="noVariantsMessage" class="text-center py-8 text-gray-500">
                        <svg class="w-16 h-16 mx-auto mb-3 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4"/>
                        </svg>
                        <p class="text-lg font-medium">No variants added yet</p>
                        <p class="text-sm">Click "Add Variant" to create your first product variant</p>
                    </div>
                </div>

                <!-- Form Actions -->
                <div class="flex justify-end space-x-4">
                    <a href="/admin/products" 
                       class="bg-gray-300 hover:bg-gray-400 text-gray-800 px-8 py-3 rounded-lg transition duration-200 shadow-md font-medium">
                        Cancel
                    </a>
                    <button type="submit" 
                            class="bg-blue-600 hover:bg-blue-700 text-white px-8 py-3 rounded-lg transition duration-200 shadow-md font-medium flex items-center space-x-2">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                        </svg>
                        <span>Save Product</span>
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Image Crop Modal -->
    <div id="cropModal" class="hidden fixed inset-0 bg-black bg-opacity-70 z-50 flex items-center justify-center p-4">
        <div class="bg-white rounded-xl shadow-2xl max-w-3xl w-full mx-4 overflow-hidden">
            <div class="bg-gradient-to-r from-blue-600 to-blue-700 px-6 py-4">
                <h3 class="text-xl font-bold text-white">Crop Image</h3>
            </div>
            <div class="p-6">
                <div class="mb-4 bg-gray-100 rounded-lg p-4">
                    <img id="cropImage" class="max-w-full mx-auto" style="max-height: 500px;">
                </div>
                <div class="flex justify-end space-x-4">
                    <button type="button" 
                            onclick="closeCropModal()" 
                            class="bg-gray-300 hover:bg-gray-400 text-gray-800 px-6 py-2.5 rounded-lg font-medium transition duration-200">
                        Cancel
                    </button>
                    <button type="button" 
                            onclick="cropImage()" 
                            class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2.5 rounded-lg font-medium transition duration-200 flex items-center space-x-2">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 10l-2 1m0 0l-2-1m2 1v2.5M20 7l-2 1m2-1l-2-1m2 1v2.5M14 4l-2-1-2 1M4 7l2-1M4 7l2 1M4 7v2.5M12 21l-2-1m2 1l2-1m-2 1v-2.5M6 18l-2-1v-2.5M18 18l2-1v-2.5"/>
                        </svg>
                        <span>Crop & Save</span>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        let variantCount = 0;
        let cropper = null;
        let currentVariantIndex = null;
        let currentImageFiles = [];
        let currentFileIndex = 0;
        const variants = [];
        const colors = <%- JSON.stringify(colors) %>;

        // Check if variants container is empty
        function updateNoVariantsMessage() {
            const container = document.getElementById('variantsContainer');
            const message = document.getElementById('noVariantsMessage');
            const activeVariants = variants.filter(v => v !== null).length;
            
            if (activeVariants === 0) {
                message.classList.remove('hidden');
            } else {
                message.classList.add('hidden');
            }
        }

        function addVariant() {
            const container = document.getElementById('variantsContainer');
            const variantId = `variant-${variantCount}`;
            
            variants.push({
                color: '',
                price: '',
                stock: '',
                images: []
            });

            const variantHtml = `
                <div id="${variantId}" class="variant-card border-2 border-gray-200 rounded-xl p-6 bg-gradient-to-br from-white to-gray-50">
                    <div class="flex justify-between items-center mb-5">
                        <div class="flex items-center space-x-3">
                            <div class="bg-purple-100 p-2 rounded-lg">
                                <svg class="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"/>
                                </svg>
                            </div>
                            <h3 class="text-lg font-bold text-gray-800">Variant ${variantCount + 1}</h3>
                        </div>
                        <button type="button" 
                                onclick="removeVariant(${variantCount})" 
                                class="text-red-600 hover:text-red-800 hover:bg-red-100 px-4 py-2 rounded-lg transition duration-200 font-medium flex items-center space-x-2">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                            </svg>
                            <span>Remove</span>
                        </button>
                    </div>

                    <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-5">
                        <div>
                            <label class="block text-gray-700 text-sm font-bold mb-2">
                                Color <span class="text-red-500">*</span>
                            </label>
                            <select onchange="updateVariantColor(${variantCount}, this.value)" 
                                    required
                                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200 bg-white">
                                <option value="">Select color</option>
                                ${colors.map(color => `<option value="${color}">${color}</option>`).join('')}
                            </select>
                        </div>

                        <div>
                            <label class="block text-gray-700 text-sm font-bold mb-2">
                                Price (â‚¹) <span class="text-red-500">*</span>
                            </label>
                            <input type="number" 
                                   min="1" 
                                   step="0.01" 
                                   onchange="updateVariantPrice(${variantCount}, this.value)" 
                                   required
                                   class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200"
                                   placeholder="0.00">
                        </div>

                        <div>
                            <label class="block text-gray-700 text-sm font-bold mb-2">
                                Stock <span class="text-red-500">*</span>
                            </label>
                            <input type="number" 
                                   min="0" 
                                   step="1" 
                                   onchange="updateVariantStock(${variantCount}, this.value)" 
                                   required
                                   class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200"
                                   placeholder="0">
                        </div>
                    </div>

                    <div class="bg-blue-50 border-2 border-dashed border-blue-300 rounded-lg p-4">
                        <label class="block text-gray-700 text-sm font-bold mb-2">
                            Product Images <span class="text-red-500">* (Minimum 3)</span>
                        </label>
                        <div class="flex items-center justify-center w-full">
                            <label class="flex flex-col items-center justify-center w-full h-32 border-2 border-blue-300 border-dashed rounded-lg cursor-pointer bg-white hover:bg-blue-50 transition duration-200">
                                <div class="flex flex-col items-center justify-center pt-5 pb-6">
                                    <svg class="w-10 h-10 mb-3 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"/>
                                    </svg>
                                    <p class="mb-2 text-sm text-gray-600"><span class="font-semibold">Click to upload</span> or drag and drop</p>
                                    <p class="text-xs text-gray-500">PNG, JPG, GIF (MAX. 5MB each)</p>
                                </div>
                                <input type="file" 
                                       accept="image/*" 
                                       multiple 
                                       onchange="handleImageUpload(event, ${variantCount})"
                                       class="hidden">
                            </label>
                        </div>
                        
                        <div id="images-preview-${variantCount}" class="grid grid-cols-3 gap-4 mt-4"></div>
                        
                        <p class="text-sm text-gray-600 mt-2 flex items-center">
                            <svg class="w-4 h-4 mr-1 text-blue-500" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"/>
                            </svg>
                            Images will be cropped to 800x800px after upload
                        </p>
                    </div>
                </div>
            `;

            container.insertAdjacentHTML('beforeend', variantHtml);
            variantCount++;
            updateNoVariantsMessage();
        }

        function removeVariant(index) {
            Swal.fire({
                title: 'Remove Variant?',
                text: "This will remove the variant and all its images",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, remove it!',
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    document.getElementById(`variant-${index}`).remove();
                    variants[index] = null;
                    updateNoVariantsMessage();
                    
                    Swal.fire({
                        title: 'Removed!',
                        text: 'Variant has been removed.',
                        icon: 'success',
                        timer: 1500,
                        showConfirmButton: false
                    });
                }
            });
        }

        function updateVariantColor(index, value) {
            if (variants[index]) variants[index].color = value;
        }

        function updateVariantPrice(index, value) {
            if (variants[index]) variants[index].price = value;
        }

        function updateVariantStock(index, value) {
            if (variants[index]) variants[index].stock = value;
        }

        function handleImageUpload(event, variantIndex) {
            const files = Array.from(event.target.files);
            
            if (files.length === 0) return;

            currentVariantIndex = variantIndex;
            currentImageFiles = files;
            currentFileIndex = 0;

            processNextImage();
            event.target.value = '';
        }

        function processNextImage() {
            if (currentFileIndex >= currentImageFiles.length) {
                return;
            }

            const file = currentImageFiles[currentFileIndex];
            const reader = new FileReader();
            
            reader.onload = (e) => {
                const img = document.getElementById('cropImage');
                img.src = e.target.result;
                
                document.getElementById('cropModal').classList.remove('hidden');
                
                if (cropper) cropper.destroy();
                
                cropper = new Cropper(img, {
                    aspectRatio: 1,
                    viewMode: 2,
                    minCropBoxWidth: 200,
                    minCropBoxHeight: 200,
                    autoCropArea: 1,
                    responsive: true,
                    background: false
                });
            };
            
            reader.readAsDataURL(file);
        }

        function closeCropModal() {
            Swal.fire({
                title: 'Cancel Cropping?',
                text: "Remaining images will not be uploaded",
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, cancel',
                cancelButtonText: 'Continue cropping'
            }).then((result) => {
                if (result.isConfirmed) {
                    document.getElementById('cropModal').classList.add('hidden');
                    if (cropper) {
                        cropper.destroy();
                        cropper = null;
                    }
                    currentImageFiles = [];
                    currentFileIndex = 0;
                }
            });
        }

        function cropImage() {
            if (!cropper) return;

            const canvas = cropper.getCroppedCanvas({
                width: 800,
                height: 800,
                imageSmoothingEnabled: true,
                imageSmoothingQuality: 'high'
            });

            canvas.toBlob((blob) => {
                const reader = new FileReader();
                reader.onload = (e) => {
                    const base64 = e.target.result;
                    
                    variants[currentVariantIndex].images.push(base64);
                    displayImagePreview(currentVariantIndex, base64, variants[currentVariantIndex].images.length - 1);
                    
                    currentFileIndex++;
                    
                    if (currentFileIndex < currentImageFiles.length) {
                        processNextImage();
                    } else {
                        document.getElementById('cropModal').classList.add('hidden');
                        if (cropper) {
                            cropper.destroy();
                            cropper = null;
                        }
                        
                        Swal.fire({
                            title: 'Success!',
                            text: `${currentImageFiles.length} image(s) uploaded successfully`,
                            icon: 'success',
                            timer: 1500,
                            showConfirmButton: false
                        });
                    }
                };
                reader.readAsDataURL(blob);
            }, 'image/jpeg', 0.9);
        }

        function displayImagePreview(variantIndex, imageData, imageIndex) {
            const previewContainer = document.getElementById(`images-preview-${variantIndex}`);
            
            const imageHtml = `
                <div class="relative group" id="image-${variantIndex}-${imageIndex}">
                    <img src="${imageData}" class="w-full h-32 object-cover rounded-lg shadow-md border-2 border-gray-200">
                    <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-40 transition duration-200 rounded-lg flex items-center justify-center">
                        <button type="button" 
                                onclick="removeImage(${variantIndex}, ${imageIndex})"
                                class="opacity-0 group-hover:opacity-100 bg-red-600 text-white rounded-full w-10 h-10 flex items-center justify-center hover:bg-red-700 transition duration-200 shadow-lg transform hover:scale-110">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                            </svg>
                        </button>
                    </div>
                    <div class="absolute top-2 left-2 bg-blue-600 text-white text-xs px-2 py-1 rounded-full font-bold">
                        ${imageIndex + 1}
                    </div>
                </div>
            `;
            
            previewContainer.insertAdjacentHTML('beforeend', imageHtml);
        }

        function removeImage(variantIndex, imageIndex) {
            Swal.fire({
                title: 'Remove Image?',
                text: "This action cannot be undone",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, remove it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    variants[variantIndex].images.splice(imageIndex, 1);
                    const previewContainer = document.getElementById(`images-preview-${variantIndex}`);
                    previewContainer.innerHTML = '';
                    variants[variantIndex].images.forEach((img, idx) => {
                        displayImagePreview(variantIndex, img, idx);
                    });
                }
            });
        }

        document.getElementById('productForm').addEventListener('submit', async (e) => {
            e.preventDefault();

            const name = document.getElementById('name').value.trim();
            const description = document.getElementById('description').value.trim();
            const brand = document.getElementById('brand').value.trim();
            const category = document.getElementById('category').value;

            if (!name || !description || !brand || !category) {
                Swal.fire({
                    icon: 'error',
                    title: 'Validation Error',
                    text: 'Please fill all required fields in Basic Information'
                });
                return;
            }

            const validVariants = variants.filter(v => v !== null);

            if (validVariants.length === 0) {
                Swal.fire({
                    icon: 'error',
                    title: 'No Variants',
                    text: 'Please add at least one product variant'
                });
                return;
            }

            for (let i = 0; i < validVariants.length; i++) {
                const variant = validVariants[i];
                
                if (!variant.color) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Validation Error',
                        text: `Variant ${i + 1}: Color is required`
                    });
                    return;
                }

                const price = parseFloat(variant.price);
                if (isNaN(price) || price <= 0) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Validation Error',
                        text: `Variant ${i + 1}: Price must be a positive number`
                    });
                    return;
                }

                                const stock = parseInt(variant.stock);
                if (isNaN(stock) || stock < 0) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Validation Error',
                        text: `Variant ${i + 1}: Stock must be a non-negative integer`
                    });
                    return;
                }

                if (!variant.images || variant.images.length < 3) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Validation Error',
                        text: `Variant ${i + 1}: Please upload at least 3 images`
                    });
                    return;
                }
            }

            const formData = {
                name,
                description,
                brand,
                category,
                variants: validVariants
            };

            try {
                Swal.fire({
                    title: 'Saving Product...',
                    text: 'Please wait while we upload images',
                    allowOutsideClick: false,
                    didOpen: () => Swal.showLoading()
                });

                const response = await fetch('/admin/products/add', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });
                
                
                const result = await response.json();

                if (response.ok) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Product Added!',
                        text: 'Your product has been successfully created',
                        showConfirmButton: false,
                        timer: 2000
                    }).then(() => {
                        window.location.href = '/admin/products';
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error!',
                        text: result.message || 'Something went wrong while saving the product'
                    });
                }

            } catch (error) {
                console.error('Error submitting form:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Network Error',
                    text: 'Unable to save product. Please try again.'
                });
            }
        });
    </script>
</body>
</html>
